import random
import numpy as np
import matplotlib.pyplot as plt
from itertools import count

id_counter = count(1)


class MapObject(object):
    """
        Objects generated by VacuumTaskEnvironment
    """
    def __init__(self, type_name):
        self.ident = id_counter.next()
        self.type = type_name

    def get_ident(self):
        return self.ident


class VacuumTaskEnvironment(object):
    """
        Task Environment for Vacuum world, world is created with a 2x1 size
        and initiated to be clean (free from dirt).
    """
    def __init__(self):
        self.objects_on_map = {}
        self.set_lifetime(1000)
        self.set_dirt_amount(10)
        self.set_map_size(2, 1)

    def set_lifetime(self, number_of_steps):
        self.lifetime = number_of_steps

    def set_dirt_amount(self, number_of_dirt_squares):
        self.dirt = number_of_dirt_squares

    def set_map_size(self, map_width, map_height):
        self.width = map_width
        self.height = map_height
        self.area = self.width * self.height
        self.map = [[[] for _ in xrange(self.width)] for _ in xrange(self.height)]

    def place_object_on_map(self, map_obj, x_pos, y_pos):
        if x_pos < 0 or x_pos >= self.width or y_pos < 0 or y_pos >= self.height:
            x_pos = random.randrange(self.width)
            y_pos = random.randrange(self.height)
        self.map[y_pos][x_pos].append(map_obj)
        self.objects_on_map[map_obj.get_ident()] = map_obj, x_pos, y_pos

    def remove_object_from_map(self, object_id):
        obj, x, y = self.objects_on_map.pop(object_id, None)
        self.map[y][x].remove(obj)

    def move_object_to_new_square(self, object_id, x_distance, y_distance):
        obj, x, y = self.objects_on_map[object_id]
        x_new = x + x_distance
        y_new = y + y_distance
        if x_new < 0 or x_new >= self.width or y_new < 0 or y_new >= self.height:
            return False
        self.map[y][x].remove(obj)
        self.map[y_new][x_new].append(obj)
        self.objects_on_map[object_id] = obj, x_new, y_new
        return True

    def return_objects_on_square(self, object_id):
        obj, x, y = self.objects_on_map[object_id]
        return self.map[y][x]

    def place_dirt_on_map_randomly(self):
        for _ in range(self.dirt):
            x = random.randrange(self.width)
            y = random.randrange(self.height)
            self.place_object_on_map(MapObject("DIRT"), x, y)

    def display_map(self):
        displayed_map = []
        for r_idx, row in enumerate(self.map):
            displayed_map.append([])
            for c_idx, column in enumerate(self.map[r_idx]):
                displayed_map[r_idx].append([])
                displayed_map[r_idx][c_idx] = 0
                for each_object in self.map[r_idx][c_idx]:
                    displayed_map[r_idx][c_idx] = displayed_map[r_idx][c_idx] + 1

        plt.imshow(displayed_map, interpolation="nearest")
        plt.colorbar()
        plt.grid(True)
        plt.title("DIRT MAP")
        plt.show()


class MapObject(object):
    """
        Objects generated by VacuumTaskEnvironment
    """
    def __init__(self, type_name):
        self.ident = id_counter.next()
        self.type = type_name

    def get_ident(self):
        return self.ident


class VacuumReflexAgent(MapObject):
    """docstring for VacuumReflexAgent"""
    def __init__(self, wmap, x_pos, y_pos):
        super(VacuumReflexAgent, self).__init__("VACUUM")
        self.possible_movements = [(1, 0), (-1, 0), (0, 1), (0, 1)]
        self.wmap = wmap
        wmap.place_object_on_map(self, x_pos, y_pos)

    def set_bumper_state(self, bumper_state):
        self.bumper = bumper_state

    def dirt_check_percept(self):
        for map_object in self.wmap.return_objects_on_square(self.get_ident()):
            if map_object.type == "DIRT":
                self.dirt_on_floor_id = map_object.type
                return map_object.ident

    def clean_up_dirt(self, obj_ident):
        if obj_ident is None:
            return
        self.wmap.remove_object_from_map(obj_ident)

    def move_to_new_square(self, list_of_movements):
        x, y = random.choice(list_of_movements)
        self.wmap.move_object_to_new_square(self.get_ident(), x, y)

    def agent_program(self):
        dirt_on_floor = self.dirt_check_percept()
        if dirt_on_floor is None:
            self.move_to_new_square(self.possible_movements)
        else:
            self.clean_up_dirt(dirt_on_floor)

    def agent_program_random(self):
        dirt_on_floor = self.dirt_check_percept()
        random_functions = [self.clean_up_dirt(dirt_on_floor),
                            self.move_to_new_square([(1, 0)]),
                            self.move_to_new_square([(-1, 0)]),
                            self.move_to_new_square([(0, 1)]),
                            self.move_to_new_square([(0, -1)])]
        random_functions[random.randrange(len(random_functions))]
