import random
import numpy as np
import matplotlib.pyplot as plt
from itertools import count

id_counter = count(1)


class MapObject(object):
    """
        Objects generated by VacuumTaskEnvironment
    """
    def __init__(self, type_name):
        self.ident = id_counter.next()
        self.type = type_name

    def get_ident(self):
        return self.ident

    def set_position(self, x_pos, y_pos):
        self.x = x_pos
        self.y = y_pos


class VacuumTaskEnvironment(object):
    """
        Task Environment for Vacuum world, world is created with a 2x1 size
        and initiated to be clean (free from dirt).
    """
    def __init__(self):
        self.objects_on_map = {}
        self.set_lifetime(1000)
        self.set_dirt_amount(10)
        self.set_map_size(2, 1)

    def set_lifetime(self, number_of_steps):
        self.lifetime = number_of_steps

    def set_dirt_amount(self, number_of_dirt_squares):
        self.dirt = number_of_dirt_squares

    def set_map_size(self, map_width, map_height):
        self.width = map_width
        self.height = map_height
        self.area = self.width * self.height
        self.map = [[[] for _ in xrange(self.width)] for _ in xrange(self.height)]

    def place_object_on_map(self, map_obj, x_pos, y_pos):
        if x_pos < 1 or x_pos > self.width or y_pos < 1 or y_pos > self.height:
            x_pos = random.randrange(self.width)
            y_pos = random.randrange(self.height)
        map_obj.set_position(x_pos, y_pos)
        self.map[y_pos - 1][x_pos - 1].append(map_obj)
        self.objects_on_map[map_obj.get_ident()] = map_obj

    def remove_object_from_map(self, object_id):
        obj = self.objects_on_map.pop(object_id, None)
        self.map[obj.y - 1][obj.x - 1].remove(obj)

    def move_object_to_new_square(self, object_id, x_pos, y_pos):
        if x_pos < 1 or x_pos > self.width or y_pos < 1 or y_pos > self.height:
            return
        obj = self.objects_on_map[object_id]
        self.map[obj.y - 1][obj.x - 1].remove(obj)
        self.map[y_pos - 1][x_pos - 1].append(obj)
        obj.set_position(x_pos, y_pos)

    def place_dirt_on_map_randomly(self):
        for _ in range(self.dirt):
            x = random.randint(1, self.width)
            y = random.randint(1, self.height)
            self.place_object_on_map(MapObject("DIRT"), x, y)

    def display_map(self):
        displayed_map = []
        for r_idx, row in enumerate(self.map):
            displayed_map.append([])
            for c_idx, column in enumerate(self.map[r_idx]):
                displayed_map[r_idx].append([])
                displayed_map[r_idx][c_idx] = 0
                for each_object in self.map[r_idx][c_idx]:
                    displayed_map[r_idx][c_idx] = displayed_map[r_idx][c_idx] + 1

        plt.imshow(displayed_map, interpolation="nearest")
        plt.colorbar()
        plt.grid(True)
        plt.title("DIRT MAP")
        plt.show()


class VacuumReflexAgent(MapObject):
    """docstring for VacuumReflexAgent"""
    def __init__(self, wmap, x_pos, y_pos):
        super(VacuumReflexAgent, self).__init__("VACUUM")
        self.wmap = wmap
        wmap.place_object_on_map(self, x_pos, y_pos)

    def check_for_dirt(self):
        for obj in self.wmap.map[self.y - 1][self.x - 1]:
            if obj.type == "DIRT":
                return obj.ident

    def clean_up_dirt(self, obj_ident):
        self.wmap.remove_object_from_map(obj_ident)

    def move_to_new_square(self):
        move_random = ["UP", "DOWN", "LEFT", "RIGHT"][random.randrange(4)]
        x = self.x
        y = self.y
        if move_random == "RIGHT":
            x = x + 1
        if move_random == "LEFT":
            x = x - 1
        if move_random == "UP":
            y = y + 1
        if move_random == "DOWN":
            y = y - 1
        self.wmap.move_object_to_new_square(self.ident, x, y)

    def agent_program(self):
        dirt_on_floor = self.check_for_dirt()
        if dirt_on_floor is None:
            self.move_to_new_square()
        else:
            self.clean_up_dirt(dirt_on_floor)


performance_dict = {}
for _ in range(300):
    for world_size in range(30):
        wmap = VacuumTaskEnvironment()
        wmap.set_map_size(world_size + 1, world_size + 1)
        wmap.place_dirt_on_map_randomly()
        vacuum = VacuumReflexAgent(wmap, 0, 0)
        performance = 5000
        for _ in range(1000):
            vacuum.agent_program()
            dirt_on_map = 0
            for key in wmap.objects_on_map:
                obj = wmap.objects_on_map[key]
                if obj.type == "DIRT":
                    dirt_on_map = dirt_on_map + 1
            performance = performance - dirt_on_map
        if (world_size + 1) in performance_dict:
            performance_dict[world_size + 1].append(performance)
        else:
            performance_dict[world_size + 1] = [performance]

performance_list = []
for key, value in performance_dict.iteritems():
    temp = value
    performance_list.append([key, reduce(lambda x, y: x + y, temp) / len(temp)])

x = zip(*performance_list)[0]
y = zip(*performance_list)[1]

plt.figure()
plt.errorbar(x, y, fmt='o')
plt.title("Stuff and what not")
plt.show()
